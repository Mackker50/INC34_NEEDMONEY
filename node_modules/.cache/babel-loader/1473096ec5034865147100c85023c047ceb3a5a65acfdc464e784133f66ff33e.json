{"ast":null,"code":"import { getWorkbookProperties, getSheets } from '../xml/xlsx.js';\n\n// I guess `xl/workbook.xml` file should always be present inside the *.xlsx archive.\nexport default function parseProperties(content, xml) {\n  var book = xml.createDocument(content);\n  var properties = {};\n\n  // Read `<workbookPr/>` element to detect whether dates are 1900-based or 1904-based.\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\n\n  var workbookProperties = getWorkbookProperties(book);\n  if (workbookProperties && workbookProperties.getAttribute('date1904') === '1') {\n    properties.epoch1904 = true;\n  }\n\n  // Get sheets info (indexes, names, if they're available).\n  // Example:\n  // <sheets>\n  //   <sheet\n  //     xmlns:ns=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n  //     name=\"Sheet1\"\n  //     sheetId=\"1\"\n  //     ns:id=\"rId3\"/>\n  // </sheets>\n  // http://www.datypic.com/sc/ooxml/e-ssml_sheet-1.html\n\n  properties.sheets = [];\n  var addSheetInfo = function addSheetInfo(sheet) {\n    if (sheet.getAttribute('name')) {\n      properties.sheets.push({\n        id: sheet.getAttribute('sheetId'),\n        name: sheet.getAttribute('name'),\n        relationId: sheet.getAttribute('r:id')\n      });\n    }\n  };\n  getSheets(book).forEach(addSheetInfo);\n  return properties;\n}","map":{"version":3,"names":["getWorkbookProperties","getSheets","parseProperties","content","xml","book","createDocument","properties","workbookProperties","getAttribute","epoch1904","sheets","addSheetInfo","sheet","push","id","name","relationId","forEach"],"sources":["/Users/thitipongleelajelawat/INC34_MONEYMAG/student-payment-app/node_modules/read-excel-file/source/read/parseProperties.js"],"sourcesContent":["import {\r\n  getWorkbookProperties,\r\n  getSheets\r\n} from '../xml/xlsx.js'\r\n\r\n// I guess `xl/workbook.xml` file should always be present inside the *.xlsx archive.\r\nexport default function parseProperties(content, xml) {\r\n  const book = xml.createDocument(content)\r\n\r\n  const properties = {};\r\n\r\n  // Read `<workbookPr/>` element to detect whether dates are 1900-based or 1904-based.\r\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\r\n\r\n  const workbookProperties = getWorkbookProperties(book)\r\n\r\n  if (workbookProperties && workbookProperties.getAttribute('date1904') === '1') {\r\n    properties.epoch1904 = true\r\n  }\r\n\r\n  // Get sheets info (indexes, names, if they're available).\r\n  // Example:\r\n  // <sheets>\r\n  //   <sheet\r\n  //     xmlns:ns=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\r\n  //     name=\"Sheet1\"\r\n  //     sheetId=\"1\"\r\n  //     ns:id=\"rId3\"/>\r\n  // </sheets>\r\n  // http://www.datypic.com/sc/ooxml/e-ssml_sheet-1.html\r\n\r\n  properties.sheets = []\r\n\r\n  const addSheetInfo = (sheet) => {\r\n    if (sheet.getAttribute('name')) {\r\n      properties.sheets.push({\r\n        id: sheet.getAttribute('sheetId'),\r\n        name: sheet.getAttribute('name'),\r\n        relationId: sheet.getAttribute('r:id')\r\n      })\r\n    }\r\n  }\r\n\r\n  getSheets(book).forEach(addSheetInfo)\r\n\r\n  return properties;\r\n}"],"mappings":"AAAA,SACEA,qBAAqB,EACrBC,SAAS,QACJ,gBAAgB;;AAEvB;AACA,eAAe,SAASC,eAAeA,CAACC,OAAO,EAAEC,GAAG,EAAE;EACpD,IAAMC,IAAI,GAAGD,GAAG,CAACE,cAAc,CAACH,OAAO,CAAC;EAExC,IAAMI,UAAU,GAAG,CAAC,CAAC;;EAErB;EACA;EACA;;EAEA,IAAMC,kBAAkB,GAAGR,qBAAqB,CAACK,IAAI,CAAC;EAEtD,IAAIG,kBAAkB,IAAIA,kBAAkB,CAACC,YAAY,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE;IAC7EF,UAAU,CAACG,SAAS,GAAG,IAAI;EAC7B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAH,UAAU,CAACI,MAAM,GAAG,EAAE;EAEtB,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAK;IAC9B,IAAIA,KAAK,CAACJ,YAAY,CAAC,MAAM,CAAC,EAAE;MAC9BF,UAAU,CAACI,MAAM,CAACG,IAAI,CAAC;QACrBC,EAAE,EAAEF,KAAK,CAACJ,YAAY,CAAC,SAAS,CAAC;QACjCO,IAAI,EAAEH,KAAK,CAACJ,YAAY,CAAC,MAAM,CAAC;QAChCQ,UAAU,EAAEJ,KAAK,CAACJ,YAAY,CAAC,MAAM;MACvC,CAAC,CAAC;IACJ;EACF,CAAC;EAEDR,SAAS,CAACI,IAAI,CAAC,CAACa,OAAO,CAACN,YAAY,CAAC;EAErC,OAAOL,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}