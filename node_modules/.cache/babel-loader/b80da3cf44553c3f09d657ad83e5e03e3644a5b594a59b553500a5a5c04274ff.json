{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport dropEmptyRows from './dropEmptyRows.js';\nimport dropEmptyColumns from './dropEmptyColumns.js';\nexport default function getData(sheet, options) {\n  var dimensions = sheet.dimensions,\n    cells = sheet.cells;\n\n  // If the sheet is empty.\n  if (cells.length === 0) {\n    return [];\n  }\n  var _dimensions = _slicedToArray(dimensions, 2),\n    leftTop = _dimensions[0],\n    rightBottom = _dimensions[1];\n\n  // Don't discard empty rows or columns at the start.\n  // https://github.com/catamphetamine/read-excel-file/issues/102\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\n\n  var colsCount = rightBottom.column;\n  var rowsCount = rightBottom.row;\n\n  // Initialize spreadsheet data structure.\n  var data = new Array(rowsCount);\n  var i = 0;\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount);\n    var j = 0;\n    while (j < colsCount) {\n      data[i][j] = null;\n      j++;\n    }\n    i++;\n  }\n\n  // Fill in spreadsheet `data`.\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\n  //  maybe that's not correct, this piece code was initially copy-pasted\n  //  from some other library that used `XPath`)\n  for (var _iterator = _createForOfIteratorHelperLoose(cells), _step; !(_step = _iterator()).done;) {\n    var cell = _step.value;\n    // Don't discard empty rows or columns at the start.\n    // https://github.com/catamphetamine/read-excel-file/issues/102\n    // const rowIndex = cell.row - leftTop.row\n    // const columnIndex = cell.column - leftTop.column\n    var rowIndex = cell.row - 1;\n    var columnIndex = cell.column - 1;\n    // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\n      data[rowIndex][columnIndex] = cell.value;\n    }\n  }\n\n  // Fill in the row map.\n  var rowIndexMap = options.rowMap;\n  if (rowIndexMap) {\n    var _i = 0;\n    while (_i < data.length) {\n      rowIndexMap[_i] = _i;\n      _i++;\n    }\n  }\n\n  // Drop empty columns or rows.\n  data = dropEmptyRows(dropEmptyColumns(data, {\n    onlyTrimAtTheEnd: true\n  }), {\n    onlyTrimAtTheEnd: true,\n    rowIndexMap: rowIndexMap\n  });\n\n  // Optionally transform data before applying `schema`.\n  if (options.transformData) {\n    data = options.transformData(data);\n    // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowIndexMap })\n    //   }\n    // })\n  }\n  return data;\n}","map":{"version":3,"names":["dropEmptyRows","dropEmptyColumns","getData","sheet","options","dimensions","cells","length","_dimensions","_slicedToArray","leftTop","rightBottom","colsCount","column","rowsCount","row","data","Array","i","j","_iterator","_createForOfIteratorHelperLoose","_step","done","cell","value","rowIndex","columnIndex","rowIndexMap","rowMap","_i","onlyTrimAtTheEnd","transformData"],"sources":["/Users/thitipongleelajelawat/INC34_MONEYMAG/student-payment-app/node_modules/read-excel-file/source/read/getData.js"],"sourcesContent":["import dropEmptyRows from './dropEmptyRows.js'\r\nimport dropEmptyColumns from './dropEmptyColumns.js'\r\n\r\nexport default function getData(sheet, options) {\r\n  const { dimensions, cells } = sheet\r\n\r\n  // If the sheet is empty.\r\n  if (cells.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const [leftTop, rightBottom] = dimensions\r\n\r\n  // Don't discard empty rows or columns at the start.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/102\r\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  const colsCount = rightBottom.column\r\n  const rowsCount = rightBottom.row\r\n\r\n  // Initialize spreadsheet data structure.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  // Fill in spreadsheet `data`.\r\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\r\n  //  maybe that's not correct, this piece code was initially copy-pasted\r\n  //  from some other library that used `XPath`)\r\n  for (const cell of cells) {\r\n    // Don't discard empty rows or columns at the start.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/102\r\n    // const rowIndex = cell.row - leftTop.row\r\n    // const columnIndex = cell.column - leftTop.column\r\n    const rowIndex = cell.row - 1\r\n    const columnIndex = cell.column - 1\r\n    // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\r\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\r\n      data[rowIndex][columnIndex] = cell.value\r\n    }\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap: rowIndexMap } = options\r\n  if (rowIndexMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowIndexMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  // Drop empty columns or rows.\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowIndexMap }\r\n  )\r\n\r\n  // Optionally transform data before applying `schema`.\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowIndexMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  return data\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,eAAe,SAASC,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC9C,IAAQC,UAAU,GAAYF,KAAK,CAA3BE,UAAU;IAAEC,KAAK,GAAKH,KAAK,CAAfG,KAAK;;EAEzB;EACA,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,EAAE;EACX;EAEA,IAAAC,WAAA,GAAAC,cAAA,CAA+BJ,UAAU;IAAlCK,OAAO,GAAAF,WAAA;IAAEG,WAAW,GAAAH,WAAA;;EAE3B;EACA;EACA;EACA;;EAEA,IAAMI,SAAS,GAAGD,WAAW,CAACE,MAAM;EACpC,IAAMC,SAAS,GAAGH,WAAW,CAACI,GAAG;;EAEjC;EACA,IAAIC,IAAI,GAAG,IAAIC,KAAK,CAACH,SAAS,CAAC;EAC/B,IAAII,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGJ,SAAS,EAAE;IACpBE,IAAI,CAACE,CAAC,CAAC,GAAG,IAAID,KAAK,CAACL,SAAS,CAAC;IAC9B,IAAIO,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGP,SAAS,EAAE;MACpBI,IAAI,CAACE,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,IAAI;MACjBA,CAAC,EAAE;IACL;IACAD,CAAC,EAAE;EACL;;EAEA;EACA;EACA;EACA;EACA,SAAAE,SAAA,GAAAC,+BAAA,CAAmBf,KAAK,GAAAgB,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;IAAA,IAAfC,IAAI,GAAAF,KAAA,CAAAG,KAAA;IACb;IACA;IACA;IACA;IACA,IAAMC,QAAQ,GAAGF,IAAI,CAACT,GAAG,GAAG,CAAC;IAC7B,IAAMY,WAAW,GAAGH,IAAI,CAACX,MAAM,GAAG,CAAC;IACnC;IACA,IAAIc,WAAW,GAAGf,SAAS,IAAIc,QAAQ,GAAGZ,SAAS,EAAE;MACnDE,IAAI,CAACU,QAAQ,CAAC,CAACC,WAAW,CAAC,GAAGH,IAAI,CAACC,KAAK;IAC1C;EACF;;EAEA;EACA,IAAgBG,WAAW,GAAKxB,OAAO,CAA/ByB,MAAM;EACd,IAAID,WAAW,EAAE;IACf,IAAIE,EAAC,GAAG,CAAC;IACT,OAAOA,EAAC,GAAGd,IAAI,CAACT,MAAM,EAAE;MACtBqB,WAAW,CAACE,EAAC,CAAC,GAAGA,EAAC;MAClBA,EAAC,EAAE;IACL;EACF;;EAEA;EACAd,IAAI,GAAGhB,aAAa,CAClBC,gBAAgB,CAACe,IAAI,EAAE;IAAEe,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAClD;IAAEA,gBAAgB,EAAE,IAAI;IAAEH,WAAW,EAAXA;EAAY,CACxC,CAAC;;EAED;EACA,IAAIxB,OAAO,CAAC4B,aAAa,EAAE;IACzBhB,IAAI,GAAGZ,OAAO,CAAC4B,aAAa,CAAChB,IAAI,CAAC;IAClC;IACA;IACA;IACA;IACA;EACF;EAEA,OAAOA,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}