{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { parseCellCoordinates } from './coordinates.js';\nimport { getDimensions } from '../xml/xlsx.js';\n\n// `dimensions` defines the spreadsheet area containing all non-empty cells.\n// https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.sheetdimension?view=openxml-2.8.1\nexport default function parseDimensions(sheet) {\n  var dimensions = getDimensions(sheet);\n  if (dimensions) {\n    dimensions = dimensions.split(':').map(parseCellCoordinates).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        row = _ref2[0],\n        column = _ref2[1];\n      return {\n        row: row,\n        column: column\n      };\n    });\n    // Sometimes there can be just a single cell as a spreadsheet's \"dimensions\".\n    // For example, the default \"dimensions\" in Apache POI library is \"A1\",\n    // meaning that only the first cell in the spreadsheet is used.\n    //\n    // A quote from Apache POI library:\n    // \"Single cell ranges are formatted like single cell references (e.g. 'A1' instead of 'A1:A1').\"\n    //\n    if (dimensions.length === 1) {\n      dimensions = [dimensions[0], dimensions[0]];\n    }\n    return dimensions;\n  }\n}","map":{"version":3,"names":["parseCellCoordinates","getDimensions","parseDimensions","sheet","dimensions","split","map","_ref","_ref2","_slicedToArray","row","column","length"],"sources":["/Users/thitipongleelajelawat/INC34_MONEYMAG/student-payment-app/node_modules/read-excel-file/source/read/parseDimensions.js"],"sourcesContent":["import {\r\n  parseCellCoordinates\r\n} from './coordinates.js'\r\n\r\nimport {\r\n  getDimensions\r\n} from '../xml/xlsx.js'\r\n\r\n// `dimensions` defines the spreadsheet area containing all non-empty cells.\r\n// https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.sheetdimension?view=openxml-2.8.1\r\nexport default function parseDimensions(sheet) {\r\n  let dimensions = getDimensions(sheet)\r\n  if (dimensions) {\r\n    dimensions = dimensions.split(':').map(parseCellCoordinates).map(([row, column]) => ({\r\n      row,\r\n      column\r\n    }))\r\n    // Sometimes there can be just a single cell as a spreadsheet's \"dimensions\".\r\n    // For example, the default \"dimensions\" in Apache POI library is \"A1\",\r\n    // meaning that only the first cell in the spreadsheet is used.\r\n    //\r\n    // A quote from Apache POI library:\r\n    // \"Single cell ranges are formatted like single cell references (e.g. 'A1' instead of 'A1:A1').\"\r\n    //\r\n    if (dimensions.length === 1) {\r\n      dimensions = [dimensions[0], dimensions[0]]\r\n    }\r\n    return dimensions\r\n  }\r\n}\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,oBAAoB,QACf,kBAAkB;AAEzB,SACEC,aAAa,QACR,gBAAgB;;AAEvB;AACA;AACA,eAAe,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC7C,IAAIC,UAAU,GAAGH,aAAa,CAACE,KAAK,CAAC;EACrC,IAAIC,UAAU,EAAE;IACdA,UAAU,GAAGA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACN,oBAAoB,CAAC,CAACM,GAAG,CAAC,UAAAC,IAAA;MAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;QAAEG,GAAG,GAAAF,KAAA;QAAEG,MAAM,GAAAH,KAAA;MAAA,OAAO;QACnFE,GAAG,EAAHA,GAAG;QACHC,MAAM,EAANA;MACF,CAAC;IAAA,CAAC,CAAC;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIP,UAAU,CAACQ,MAAM,KAAK,CAAC,EAAE;MAC3BR,UAAU,GAAG,CAACA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOA,UAAU;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}